# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.home.graph.v1 import homegraph_pb2 as google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class HomeGraphApiServiceStub(object):
  """Google HomeGraph API. HomeGraph Service provides the support for storing
  and querying first-party and third-party devices, rooms and structures,
  the relationships among them and their state in the home. It stores
  entities and their relationships in the home.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RequestSyncDevices = channel.unary_unary(
        '/google.home.graph.v1.HomeGraphApiService/RequestSyncDevices',
        request_serializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.RequestSyncDevicesRequest.SerializeToString,
        response_deserializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.RequestSyncDevicesResponse.FromString,
        )
    self.ReportStateAndNotification = channel.unary_unary(
        '/google.home.graph.v1.HomeGraphApiService/ReportStateAndNotification',
        request_serializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.ReportStateAndNotificationRequest.SerializeToString,
        response_deserializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.ReportStateAndNotificationResponse.FromString,
        )
    self.DeleteAgentUser = channel.unary_unary(
        '/google.home.graph.v1.HomeGraphApiService/DeleteAgentUser',
        request_serializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.DeleteAgentUserRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.Query = channel.unary_unary(
        '/google.home.graph.v1.HomeGraphApiService/Query',
        request_serializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.QueryRequest.SerializeToString,
        response_deserializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.QueryResponse.FromString,
        )
    self.Sync = channel.unary_unary(
        '/google.home.graph.v1.HomeGraphApiService/Sync',
        request_serializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.SyncRequest.SerializeToString,
        response_deserializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.SyncResponse.FromString,
        )


class HomeGraphApiServiceServicer(object):
  """Google HomeGraph API. HomeGraph Service provides the support for storing
  and querying first-party and third-party devices, rooms and structures,
  the relationships among them and their state in the home. It stores
  entities and their relationships in the home.
  """

  def RequestSyncDevices(self, request, context):
    """Requests a Sync call from Google to a 3p partner's home control agent for
    a user.


    Third-party user's identity is passed in as agent_user_id.
    (see
    [RequestSyncDevicesRequest][google.home.graph.v1.RequestSyncDevicesRequest])
    and forwarded back to the agent. Agent is identified by the API key or JWT
    signed by the partner's service account.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReportStateAndNotification(self, request, context):
    """Reports device state and optionally sends device notifications. Called by
    an agent when the device state of a third-party changes or the agent wants
    to send a notification about the device.
    This method updates a predefined set of States for a device, which all
    devices have (for example a light will have OnOff, Color, Brightness).
    A new State may not be created and an INVALID_ARGUMENT code will be thrown
    if so. It also optionally takes in a list of Notifications that may be
    created, which are associated to this State change.

    Third-party user's identity is passed in as agent_user_id.
    Agent is identified by the JWT signed by the partner's service account.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteAgentUser(self, request, context):
    """Unlink an agent user from Google. As result, all data related to this user
    will be deleted.

    Here is how the agent user is created in Google:
    When users open their Google Home App, they can begin linking a 3p
    partner. User is guided through the OAuth process. After entering the 3p
    credentials, Google gets the 3p OAuth token, and uses it to make a
    Sync call to the 3p partner and gets back all the user's data, including
    agent_user_id and devices.
    Google then creates the agent user and stores a mapping from the
    agent_user_id -> Google ID mapping. Google also stores all user's devices
    under that Google ID.
    The mapping from agent_user_id -> Google ID is many to many, since one
    Google user can have multiple 3p accounts, and multiple Google users can
    map to one agent_user_id (e.g. husband and wife share one Nest account
    username/password).

    Third-party user's identity is passed in as agent_user_id
    Agent is identified by the JWT signed by the partner's service account.

    Note: Special characters (except "/") in agent_user_id must be URL encoded.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Query(self, request, context):
    """Gets the device states for the devices in QueryRequest.
    Third-party user's identity is passed in as agent_user_id. Agent is
    identified by the JWT signed by the third-party partner's service account.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Sync(self, request, context):
    """Gets all the devices associated with the given third-party user.
    Third-party user's identity is passed in as agent_user_id. Agent is
    identified by the JWT signed by the third-party partner's service account.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_HomeGraphApiServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RequestSyncDevices': grpc.unary_unary_rpc_method_handler(
          servicer.RequestSyncDevices,
          request_deserializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.RequestSyncDevicesRequest.FromString,
          response_serializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.RequestSyncDevicesResponse.SerializeToString,
      ),
      'ReportStateAndNotification': grpc.unary_unary_rpc_method_handler(
          servicer.ReportStateAndNotification,
          request_deserializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.ReportStateAndNotificationRequest.FromString,
          response_serializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.ReportStateAndNotificationResponse.SerializeToString,
      ),
      'DeleteAgentUser': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteAgentUser,
          request_deserializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.DeleteAgentUserRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'Query': grpc.unary_unary_rpc_method_handler(
          servicer.Query,
          request_deserializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.QueryRequest.FromString,
          response_serializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.QueryResponse.SerializeToString,
      ),
      'Sync': grpc.unary_unary_rpc_method_handler(
          servicer.Sync,
          request_deserializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.SyncRequest.FromString,
          response_serializer=google_dot_home_dot_graph_dot_v1_dot_homegraph__pb2.SyncResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'google.home.graph.v1.HomeGraphApiService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
